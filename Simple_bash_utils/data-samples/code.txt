#include "s21_cat.h"

#include <ctype.h>
#include <getopt.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

static void print_nonprinting_char(unsigned char c) {
  if (c == 127) {
    printf("^?");
  } else if (c < 32 && c != '\t' && c != '\n') {
    printf("^%c", c + 64);
  } else if (c >= 128) {
    printf("M-");
    c &= 127;
    if (c < 32) {
      printf("^%c", c + 64);
    } else {
      putchar(c);
    }
  } else {
    putchar(c);
  }
}

void process_line(const char *line, Options *opts) {
  int is_blank = (line[0] == '\n' || line[0] == '\0');
  size_t len = strlen(line);
  int line_ends_with_nl = (len > 0 && line[len - 1] == '\n');

  if (opts->squeeze_blank) {
    if (is_blank) {
      if (opts->prev_line_blank) {
        return;
      }
      opts->prev_line_blank = 1;
    } else {
      opts->prev_line_blank = 0;
    }
  }

  int print_number = 0;

  if (opts->skip_number_for_next_line) {
    opts->skip_number_for_next_line = 0;
    print_number = 0;
  } else if (opts->number_nonblank) {
    if (!is_blank) {
      print_number = 1;
    }
  } else if (opts->number) {
    if (!(is_blank && opts->prev_file_nl == 0)) {
      print_number = 1;
    }
  }

  if (print_number) {
    printf("%6d\t", opts->current_line++);
  }

  for (const unsigned char *p = (const unsigned char *)line; *p; p++) {
    unsigned char c = *p;
    if (c == '\t') {
      if (opts->show_tabs) {
        printf("^I");
      } else if (opts->non_printing) {
        print_nonprinting_char(c);
      } else {
        putchar(c);
      }
    } else if (c == '\n') {
      if (opts->show_ends) {
        putchar('$');
      }
      putchar('\n');
    } else {
      if (opts->non_printing) {
        print_nonprinting_char(c);
      } else {
        putchar(c);
      }
    }
  }

  if (!line_ends_with_nl) {
    opts->skip_number_for_next_line = 1;
  }

  opts->last_line_no_nl = !line_ends_with_nl;
  opts->prev_file_nl = line_ends_with_nl;
}

void parse_args(int argc, char **argv, Options *opts) {
  static struct option long_options[] = {
      {"number-nonblank", no_argument, NULL, 'b'},
      {"number", no_argument, NULL, 'n'},
      {"squeeze-blank", no_argument, NULL, 's'},
      {NULL, 0, NULL, 0}};

  int opt;
  while ((opt = getopt_long(argc, argv, "beEnstTv", long_options, NULL)) !=
         -1) {
    switch (opt) {
      case 'b':
        opts->number_nonblank = 1;
        opts->number = 0;
        break;
      case 'e':
        opts->show_ends = 1;
        opts->non_printing = 1;
        break;
      case 'E':
        opts->show_ends = 1;
        break;
      case 'n':
        if (!opts->number_nonblank) {
          opts->number = 1;
        }
        break;
      case 's':
        opts->squeeze_blank = 1;
        break;
      case 't':
        opts->show_tabs = 1;
        opts->non_printing = 1;
        break;
      case 'T':
        opts->show_tabs = 1;
        break;
      case 'v':
        opts->non_printing = 1;
        break;
      default:
        fprintf(stderr, "Invalid option\n");
        exit(EXIT_FAILURE);
    }
  }
}

void process_file(const char *filename, Options *opts) {
  FILE *file = strcmp(filename, "-") == 0 ? stdin : fopen(filename, "r");
  if (!file) {
    perror(filename);
    return;
  }

  char *line = NULL;
  size_t len = 0;
  ssize_t read;

  char *buffered_line = NULL;
  size_t buffered_len = 0;

  while ((read = getline(&line, &len, file)) != -1) {
    int has_newline = (read > 0 && line[read - 1] == '\n');

    if (buffered_line) {
      buffered_line = realloc(buffered_line, buffered_len + read + 1);
      memcpy(buffered_line + buffered_len, line, read + 1);
      buffered_len += read;

      if (has_newline) {
        process_line(buffered_line, opts);
        free(buffered_line);
        buffered_line = NULL;
        buffered_len = 0;
      }
    } else {
      if (has_newline) {
        process_line(line, opts);
      } else {
        buffered_line = malloc(read + 1);
        memcpy(buffered_line, line, read + 1);
        buffered_len = read;
      }
    }
  }

  if (buffered_line) {
    process_line(buffered_line, opts);
    free(buffered_line);
  }

  free(line);
  if (file != stdin) {
    fclose(file);
  }
}

int main(int argc, char **argv) {
  Options opts = {0};
  parse_args(argc, argv, &opts);

  opts.current_line = 1;
  opts.prev_line_blank = 0;
  opts.prev_file_nl = 1;
  opts.last_line_no_nl = 0;
  opts.skip_number_for_next_line = 0;

  if (optind == argc) {
    process_file("-", &opts);
  } else {
    for (int i = optind; i < argc; i++) {
      process_file(argv[i], &opts);
    }
  }

  return 0;
}




